{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Myst-Lee/Advanced-Machine-Learning/blob/main/WOA7015_GroupProject_Ming_Yi.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import torch\n",
        "from torch.autograd import Variable\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from torch.utils.data import Dataset, DataLoader, TensorDataset\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.base import BaseEstimator, ClassifierMixin\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "IGNC3s6V1soh"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Exploration**"
      ],
      "metadata": {
        "id": "vE_Doci97X6i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download latest version\n",
        "path = kagglehub.dataset_download(\"iammustafatz/diabetes-prediction-dataset\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EEITmQARlBS1",
        "outputId": "b6a9d4a2-491a-416b-a1a5-0cd88574a7ce"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path to dataset files: /root/.cache/kagglehub/datasets/iammustafatz/diabetes-prediction-dataset/versions/1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diabetes_df = pd.read_csv(path + '/diabetes_prediction_dataset.csv')\n",
        "diabetes_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "euTrtAaDwRru",
        "outputId": "90580977-1b27-4d9f-9f99-1ba373ab8be9"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gender   age  hypertension  heart_disease smoking_history    bmi  \\\n",
              "0  Female  80.0             0              1           never  25.19   \n",
              "1  Female  54.0             0              0         No Info  27.32   \n",
              "2    Male  28.0             0              0           never  27.32   \n",
              "3  Female  36.0             0              0         current  23.45   \n",
              "4    Male  76.0             1              1         current  20.14   \n",
              "\n",
              "   HbA1c_level  blood_glucose_level  diabetes  \n",
              "0          6.6                  140         0  \n",
              "1          6.6                   80         0  \n",
              "2          5.7                  158         0  \n",
              "3          5.0                  155         0  \n",
              "4          4.8                  155         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c5abf29e-fbb0-4ecc-be7c-8df3cb0e3add\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Female</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>never</td>\n",
              "      <td>25.19</td>\n",
              "      <td>6.6</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Female</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>No Info</td>\n",
              "      <td>27.32</td>\n",
              "      <td>6.6</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Male</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>never</td>\n",
              "      <td>27.32</td>\n",
              "      <td>5.7</td>\n",
              "      <td>158</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Female</td>\n",
              "      <td>36.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>current</td>\n",
              "      <td>23.45</td>\n",
              "      <td>5.0</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>76.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>current</td>\n",
              "      <td>20.14</td>\n",
              "      <td>4.8</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5abf29e-fbb0-4ecc-be7c-8df3cb0e3add')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c5abf29e-fbb0-4ecc-be7c-8df3cb0e3add button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c5abf29e-fbb0-4ecc-be7c-8df3cb0e3add');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d92abb16-f0fb-4fbb-83ba-957fc606d3da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d92abb16-f0fb-4fbb-83ba-957fc606d3da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d92abb16-f0fb-4fbb-83ba-957fc606d3da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "diabetes_df",
              "summary": "{\n  \"name\": \"diabetes_df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Male\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.51683987161513,\n        \"min\": 0.08,\n        \"max\": 80.0,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          29.0,\n          39.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"never\",\n          \"No Info\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.636783416649581,\n        \"min\": 10.01,\n        \"max\": 95.69,\n        \"num_unique_values\": 4247,\n        \"samples\": [\n          53.27,\n          32.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0706720918832282,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          6.6,\n          5.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 80,\n        \"max\": 300,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          140,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply OneHot Encoding\n",
        "diabetes_df['gender'] = diabetes_df['gender'].replace({'Other': np.nan})\n",
        "diabetes_df['smoking_history'] = diabetes_df['smoking_history'].replace({'never': 0, 'current': 1, 'former': 2, 'ever': 3, 'not current': 4, 'No Info': np.nan})\n",
        "\n",
        "diabetes_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 262
        },
        "id": "_YOAiCc5Kjw9",
        "outputId": "caf34d87-4f28-4988-c5ab-85f8dfffb2af"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-eb19a1d2ea5e>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
            "  diabetes_df['smoking_history'] = diabetes_df['smoking_history'].replace({'never': 0, 'current': 1, 'former': 2, 'ever': 3, 'not current': 4, 'No Info': np.nan})\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gender   age  hypertension  heart_disease  smoking_history    bmi  \\\n",
              "0  Female  80.0             0              1              0.0  25.19   \n",
              "1  Female  54.0             0              0              NaN  27.32   \n",
              "2    Male  28.0             0              0              0.0  27.32   \n",
              "3  Female  36.0             0              0              1.0  23.45   \n",
              "4    Male  76.0             1              1              1.0  20.14   \n",
              "\n",
              "   HbA1c_level  blood_glucose_level  diabetes  \n",
              "0          6.6                  140         0  \n",
              "1          6.6                   80         0  \n",
              "2          5.7                  158         0  \n",
              "3          5.0                  155         0  \n",
              "4          4.8                  155         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecd6a279-9219-4ca6-b949-0a1dd1b1585d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Female</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>25.19</td>\n",
              "      <td>6.6</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Female</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>27.32</td>\n",
              "      <td>6.6</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Male</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>27.32</td>\n",
              "      <td>5.7</td>\n",
              "      <td>158</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Female</td>\n",
              "      <td>36.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23.45</td>\n",
              "      <td>5.0</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>76.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>20.14</td>\n",
              "      <td>4.8</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecd6a279-9219-4ca6-b949-0a1dd1b1585d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ecd6a279-9219-4ca6-b949-0a1dd1b1585d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ecd6a279-9219-4ca6-b949-0a1dd1b1585d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-656c6efe-40e5-4973-8ffd-8e93803e5424\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-656c6efe-40e5-4973-8ffd-8e93803e5424')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-656c6efe-40e5-4973-8ffd-8e93803e5424 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "diabetes_df",
              "summary": "{\n  \"name\": \"diabetes_df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.51683987161513,\n        \"min\": 0.08,\n        \"max\": 80.0,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          29.0,\n          39.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3584693800723953,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.636783416649581,\n        \"min\": 10.01,\n        \"max\": 95.69,\n        \"num_unique_values\": 4247,\n        \"samples\": [\n          53.27,\n          32.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0706720918832282,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          6.6,\n          5.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 80,\n        \"max\": 300,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          140,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diabetes_df.describe().T"
      ],
      "metadata": {
        "id": "-mymk3eM7kLL",
        "outputId": "67572d04-ba33-4472-b63b-efbb8124eb1c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        count        mean        std    min     25%     50%  \\\n",
              "age                  100000.0   41.885856  22.516840   0.08   24.00   43.00   \n",
              "hypertension         100000.0    0.074850   0.263150   0.00    0.00    0.00   \n",
              "heart_disease        100000.0    0.039420   0.194593   0.00    0.00    0.00   \n",
              "smoking_history       64184.0    1.025022   1.358469   0.00    0.00    0.00   \n",
              "bmi                  100000.0   27.320767   6.636783  10.01   23.63   27.32   \n",
              "HbA1c_level          100000.0    5.527507   1.070672   3.50    4.80    5.80   \n",
              "blood_glucose_level  100000.0  138.058060  40.708136  80.00  100.00  140.00   \n",
              "diabetes             100000.0    0.085000   0.278883   0.00    0.00    0.00   \n",
              "\n",
              "                        75%     max  \n",
              "age                   60.00   80.00  \n",
              "hypertension           0.00    1.00  \n",
              "heart_disease          0.00    1.00  \n",
              "smoking_history        2.00    4.00  \n",
              "bmi                   29.58   95.69  \n",
              "HbA1c_level            6.20    9.00  \n",
              "blood_glucose_level  159.00  300.00  \n",
              "diabetes               0.00    1.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-581c5ad1-9223-4653-bad4-ff2f909a96e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>41.885856</td>\n",
              "      <td>22.516840</td>\n",
              "      <td>0.08</td>\n",
              "      <td>24.00</td>\n",
              "      <td>43.00</td>\n",
              "      <td>60.00</td>\n",
              "      <td>80.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>0.074850</td>\n",
              "      <td>0.263150</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heart_disease</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>0.039420</td>\n",
              "      <td>0.194593</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_history</th>\n",
              "      <td>64184.0</td>\n",
              "      <td>1.025022</td>\n",
              "      <td>1.358469</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>27.320767</td>\n",
              "      <td>6.636783</td>\n",
              "      <td>10.01</td>\n",
              "      <td>23.63</td>\n",
              "      <td>27.32</td>\n",
              "      <td>29.58</td>\n",
              "      <td>95.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HbA1c_level</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>5.527507</td>\n",
              "      <td>1.070672</td>\n",
              "      <td>3.50</td>\n",
              "      <td>4.80</td>\n",
              "      <td>5.80</td>\n",
              "      <td>6.20</td>\n",
              "      <td>9.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>138.058060</td>\n",
              "      <td>40.708136</td>\n",
              "      <td>80.00</td>\n",
              "      <td>100.00</td>\n",
              "      <td>140.00</td>\n",
              "      <td>159.00</td>\n",
              "      <td>300.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <td>100000.0</td>\n",
              "      <td>0.085000</td>\n",
              "      <td>0.278883</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-581c5ad1-9223-4653-bad4-ff2f909a96e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-581c5ad1-9223-4653-bad4-ff2f909a96e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-581c5ad1-9223-4653-bad4-ff2f909a96e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-24522737-3030-4e60-978e-a660bcafbd07\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24522737-3030-4e60-978e-a660bcafbd07')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-24522737-3030-4e60-978e-a660bcafbd07 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"diabetes_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12662.868237488694,\n        \"min\": 64184.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          64184.0,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.610193607333144,\n        \"min\": 0.03942,\n        \"max\": 138.05806,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.07485,\n          5.527507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.855285308340555,\n        \"min\": 0.19459301699790674,\n        \"max\": 40.70813604870113,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2631504702291422,\n          1.0706720918832282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.81975271405964,\n        \"min\": 0.0,\n        \"max\": 80.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0,\n          80.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.33668131792255,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.38910827861989,\n        \"min\": 0.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.49314030966865,\n        \"min\": 0.0,\n        \"max\": 159.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          60.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103.81074406788812,\n        \"min\": 1.0,\n        \"max\": 300.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          80.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diabetes_df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "G4hNrx1M44hQ",
        "outputId": "ff3e9ad8-6e20-4da0-b867-0fab053c114d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gender                    18\n",
              "age                        0\n",
              "hypertension               0\n",
              "heart_disease              0\n",
              "smoking_history        35816\n",
              "bmi                        0\n",
              "HbA1c_level                0\n",
              "blood_glucose_level        0\n",
              "diabetes                   0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heart_disease</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_history</th>\n",
              "      <td>35816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HbA1c_level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diabetes_df = diabetes_df.dropna()\n",
        "diabetes_df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "id": "2vAV72ipzoOI",
        "outputId": "1578590d-0310-4f3a-adb3-1c41931ee022"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gender                 0\n",
              "age                    0\n",
              "hypertension           0\n",
              "heart_disease          0\n",
              "smoking_history        0\n",
              "bmi                    0\n",
              "HbA1c_level            0\n",
              "blood_glucose_level    0\n",
              "diabetes               0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heart_disease</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_history</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HbA1c_level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "male_data = diabetes_df[diabetes_df['gender'] == \"Male\"]\n",
        "female_data = diabetes_df[diabetes_df['gender'] == \"Female\"]\n",
        "\n",
        "male_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "vLc7JC2zKTm3",
        "outputId": "9cdf4093-b75a-4f31-ca03-d17f3ab3fcda"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gender   age  hypertension  heart_disease  smoking_history    bmi  \\\n",
              "2    Male  28.0             0              0              0.0  27.32   \n",
              "4    Male  76.0             1              1              1.0  20.14   \n",
              "8    Male  42.0             0              0              0.0  33.64   \n",
              "16   Male  15.0             0              0              0.0  30.36   \n",
              "19   Male  37.0             0              0              3.0  25.72   \n",
              "\n",
              "    HbA1c_level  blood_glucose_level  diabetes  \n",
              "2           5.7                  158         0  \n",
              "4           4.8                  155         0  \n",
              "8           4.8                  145         0  \n",
              "16          6.1                  200         0  \n",
              "19          3.5                  159         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0a2e3a25-3b3d-4355-a436-c1d2feddb8e7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Male</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>27.32</td>\n",
              "      <td>5.7</td>\n",
              "      <td>158</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>76.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>20.14</td>\n",
              "      <td>4.8</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Male</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>33.64</td>\n",
              "      <td>4.8</td>\n",
              "      <td>145</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Male</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>30.36</td>\n",
              "      <td>6.1</td>\n",
              "      <td>200</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Male</td>\n",
              "      <td>37.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>25.72</td>\n",
              "      <td>3.5</td>\n",
              "      <td>159</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a2e3a25-3b3d-4355-a436-c1d2feddb8e7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0a2e3a25-3b3d-4355-a436-c1d2feddb8e7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0a2e3a25-3b3d-4355-a436-c1d2feddb8e7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-41159c5b-f117-4eb0-947f-f57761b2b376\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41159c5b-f117-4eb0-947f-f57761b2b376')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-41159c5b-f117-4eb0-947f-f57761b2b376 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "male_data",
              "summary": "{\n  \"name\": \"male_data\",\n  \"rows\": 25320,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.79249038579691,\n        \"min\": 0.16,\n        \"max\": 80.0,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3496706833720453,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.869398837016565,\n        \"min\": 10.08,\n        \"max\": 91.82,\n        \"num_unique_values\": 3125,\n        \"samples\": [\n          32.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1125083011084662,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          5.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 80,\n        \"max\": 300,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          158\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "female_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "XeHv5F0ZTycv",
        "outputId": "c4af3009-9258-4f0f-b254-6c938e4fd4ea"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gender   age  hypertension  heart_disease  smoking_history    bmi  \\\n",
              "0  Female  80.0             0              1              0.0  25.19   \n",
              "3  Female  36.0             0              0              1.0  23.45   \n",
              "5  Female  20.0             0              0              0.0  27.32   \n",
              "6  Female  44.0             0              0              0.0  19.31   \n",
              "9  Female  32.0             0              0              0.0  27.32   \n",
              "\n",
              "   HbA1c_level  blood_glucose_level  diabetes  \n",
              "0          6.6                  140         0  \n",
              "3          5.0                  155         0  \n",
              "5          6.6                   85         0  \n",
              "6          6.5                  200         1  \n",
              "9          5.0                  100         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4405584c-8232-486e-8e86-ef114d6f7515\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>HbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Female</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>25.19</td>\n",
              "      <td>6.6</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Female</td>\n",
              "      <td>36.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23.45</td>\n",
              "      <td>5.0</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Female</td>\n",
              "      <td>20.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>27.32</td>\n",
              "      <td>6.6</td>\n",
              "      <td>85</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Female</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>19.31</td>\n",
              "      <td>6.5</td>\n",
              "      <td>200</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Female</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>27.32</td>\n",
              "      <td>5.0</td>\n",
              "      <td>100</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4405584c-8232-486e-8e86-ef114d6f7515')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4405584c-8232-486e-8e86-ef114d6f7515 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4405584c-8232-486e-8e86-ef114d6f7515');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-92169dbb-19d9-4265-b096-6360aa6c2625\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-92169dbb-19d9-4265-b096-6360aa6c2625')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-92169dbb-19d9-4265-b096-6360aa6c2625 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "female_data",
              "summary": "{\n  \"name\": \"female_data\",\n  \"rows\": 38852,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.365394139727254,\n        \"min\": 0.16,\n        \"max\": 80.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          1.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3586955577317597,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.904261304957913,\n        \"min\": 10.77,\n        \"max\": 88.72,\n        \"num_unique_values\": 3657,\n        \"samples\": [\n          24.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0835827835016432,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 80,\n        \"max\": 300,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          140\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: plot gender by diabetes\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Assuming 'diabetes_df' is your DataFrame as defined in the preceding code.\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(x='gender', hue='diabetes', data=diabetes_df, palette=\"Set2\")\n",
        "plt.title('Gender by Diabetes Ratio')\n",
        "plt.xlabel('Diabetes')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "XUrEGFbGT4Ss",
        "outputId": "71f3f338-fa3a-4dee-c2a5-01506455a1c7"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "male_data.hist(figsize = (9,7))\n",
        "plt.suptitle(\"Male Diabetes Parameter Histogram\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 666
        },
        "id": "pUW8yTwU6lyc",
        "outputId": "df29b8b1-9b21-4d36-da4d-1cd28786585e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0.98, 'Male Diabetes Parameter Histogram')"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x700 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "female_data.hist(figsize = (9,7))\n",
        "plt.suptitle(\"Female Diabetes Parameter Histogram\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 666
        },
        "id": "vSVYrBrbVg0t",
        "outputId": "00e335bc-9e45-41e8-915d-60fae86ca0a7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0.98, 'Female Diabetes Parameter Histogram')"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x700 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Preprocessing**"
      ],
      "metadata": {
        "id": "cUHGyCtkAYUO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scaling the Data"
      ],
      "metadata": {
        "id": "N2bUO62MAfCX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "features= ['age', 'hypertension', 'heart_disease', 'smoking_history','bmi', 'HbA1c_level', 'blood_glucose_level']\n",
        "target = 'diabetes'\n",
        "\n",
        "male_data = diabetes_df[diabetes_df['gender'] == \"Male\"]\n",
        "female_data = diabetes_df[diabetes_df['gender'] == \"Female\"]\n",
        "\n",
        "# Multi task learning\n",
        "X = diabetes_df[features]\n",
        "y_male = (diabetes_df['gender'] == \"Male\").astype(int)*diabetes_df[target]\n",
        "y_female = (diabetes_df['gender'] == \"Female\").astype(int)*diabetes_df[target]"
      ],
      "metadata": {
        "id": "9j4eXZEHZ1WM"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(diabetes_df[features])\n",
        "\n",
        "X_train, X_test, y_train_male, y_test_male, y_train_female, y_test_female = train_test_split(\n",
        "    X_scaled, y_male, y_female, test_size=0.2, random_state=42\n",
        ")"
      ],
      "metadata": {
        "id": "HthmaNX2AdBc"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Model Training**"
      ],
      "metadata": {
        "id": "y8hAnsuxF_7M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 64\n",
        "\n",
        "# Creating datasets using TensorDataset\n",
        "train_dataset = TensorDataset(torch.tensor(X_train, dtype=torch.float32), torch.tensor(y_train_male.values, dtype=torch.float32))\n",
        "test_dataset = TensorDataset(torch.tensor(X_test, dtype=torch.float32), torch.tensor(y_test_male.values, dtype=torch.float32))\n",
        "\n",
        "# Creating data loaders\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)"
      ],
      "metadata": {
        "id": "cotXt-M2khQs"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MultiLayerNet(torch.nn.Module):\n",
        "    def __init__(self, input_size, frst_hidden_neurons, scnd_hidden_neurons, output_size):\n",
        "        super(MultiLayerNet, self).__init__()\n",
        "        self.first_hidden_layer = torch.nn.Linear(input_size, frst_hidden_neurons)\n",
        "        self.second_hidden_layer = torch.nn.Linear(frst_hidden_neurons, scnd_hidden_neurons)\n",
        "        self.output_layer = torch.nn.Linear(scnd_hidden_neurons, output_size)\n",
        "        self.dropout = torch.nn.Dropout(0.5)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.relu(self.first_hidden_layer(x))\n",
        "        x = self.dropout(x)\n",
        "        x = torch.softmax(self.second_hidden_layer(x), dim=1)\n",
        "        x = self.dropout(x)\n",
        "        x = torch.sigmoid(self.output_layer(x))\n",
        "\n",
        "        return x"
      ],
      "metadata": {
        "id": "1CtlZp5H1thC"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "learningRate = 0.001\n",
        "epochs = 1000\n",
        "\n",
        "model = MultiLayerNet(7, 16, 16, 1)\n",
        "if torch.cuda.is_available():\n",
        "    model.cuda()\n",
        "\n",
        "criterion = torch.nn.BCELoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=learningRate)"
      ],
      "metadata": {
        "id": "_Z8cNy8p1vEM"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_loss = []\n",
        "eval_loss = []\n",
        "acc_list = []\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    for X_batch, y_batch in train_loader:\n",
        "      if torch.cuda.is_available():\n",
        "          X_batch = X_batch.cuda()\n",
        "          y_batch = y_batch.cuda()\n",
        "\n",
        "      optimizer.zero_grad()\n",
        "      outputs = model(X_batch)\n",
        "      y_batch = y_batch.unsqueeze(1)\n",
        "      loss = criterion(outputs, y_batch)\n",
        "      loss.backward()\n",
        "\n",
        "      # update parameters\n",
        "      optimizer.step()\n",
        "\n",
        "    if epoch % 100 == 0:\n",
        "      print('epoch {}, loss {}'.format(epoch, loss.item()))\n",
        "\n",
        "    training_loss.append(loss.item())\n",
        "\n",
        "    # Validation\n",
        "    for x__val_batch, y__val_batch in test_loader:\n",
        "      if torch.cuda.is_available():\n",
        "          x__val_batch = x__val_batch.cuda()\n",
        "          y__val_batch = y__val_batch.cuda()\n",
        "\n",
        "      # model.eval()\n",
        "      val_outputs = model(x__val_batch)\n",
        "      y__val_batch = y__val_batch.unsqueeze(1)\n",
        "      val_loss = criterion(val_outputs, y__val_batch)\n",
        "\n",
        "      acc = (val_outputs.round() == y__val_batch).float().mean()\n",
        "\n",
        "    if epoch % 100 == 0:\n",
        "      print(\"Model accuracy: %.2f%%\" % (float(acc)*100))\n",
        "      print('epoch {}, val_loss {}\\n'.format(epoch, val_loss.item()))\n",
        "\n",
        "\n",
        "    eval_loss.append(val_loss.item())\n",
        "    acc_list.append(float(acc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dj52Q7Li1xoi",
        "outputId": "719f245f-1e43-4918-91cf-0bc6eb65abf6"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "epoch 0, loss 0.2862544655799866\n",
            "Model accuracy: 91.43%\n",
            "epoch 0, val_loss 0.36317190527915955\n",
            "\n",
            "epoch 100, loss 0.025959238409996033\n",
            "Model accuracy: 91.43%\n",
            "epoch 100, val_loss 0.12459419667720795\n",
            "\n",
            "epoch 200, loss 0.07324593514204025\n",
            "Model accuracy: 91.43%\n",
            "epoch 200, val_loss 0.10996997356414795\n",
            "\n",
            "epoch 300, loss 1.2451167106628418\n",
            "Model accuracy: 94.29%\n",
            "epoch 300, val_loss 0.12392785400152206\n",
            "\n",
            "epoch 400, loss 0.07295003533363342\n",
            "Model accuracy: 94.29%\n",
            "epoch 400, val_loss 0.14014868438243866\n",
            "\n",
            "epoch 500, loss 0.11240199208259583\n",
            "Model accuracy: 91.43%\n",
            "epoch 500, val_loss 0.12156152725219727\n",
            "\n",
            "epoch 600, loss 0.2551843523979187\n",
            "Model accuracy: 91.43%\n",
            "epoch 600, val_loss 0.15975922346115112\n",
            "\n",
            "epoch 700, loss 0.047125931829214096\n",
            "Model accuracy: 94.29%\n",
            "epoch 700, val_loss 0.09664208441972733\n",
            "\n",
            "epoch 800, loss 0.02053423412144184\n",
            "Model accuracy: 91.43%\n",
            "epoch 800, val_loss 0.17057126760482788\n",
            "\n",
            "epoch 900, loss 0.12113968282938004\n",
            "Model accuracy: 94.29%\n",
            "epoch 900, val_loss 0.1252252608537674\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(training_loss, linestyle='-', color='b', label='Training Loss')\n",
        "plt.plot(eval_loss, linestyle=':', color='r', label='Validation Loss')\n",
        "plt.plot(acc_list, linestyle='-', color='g', label='Accuracy')\n",
        "\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Cross Entropy Loss')\n",
        "plt.title('Training Progress')\n",
        "\n",
        "plt.grid(True)\n",
        "\n",
        "# Show legend\n",
        "plt.legend()"
      ],
      "metadata": {
        "id": "NbM9PrXL3Mjq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "outputId": "896cbafe-ba82-4405-f4ab-751bb003ecc0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x79f0d3027fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "def evaluate_model(model, test_loader, criterion):\n",
        "    model.eval()  # Set the model to evaluation mode\n",
        "    total_loss = 0.0\n",
        "    correct_predictions = 0\n",
        "    total_samples = 0\n",
        "\n",
        "    with torch.no_grad():  # Disable gradient calculations during evaluation\n",
        "        for X_batch, y_batch in test_loader:\n",
        "            if torch.cuda.is_available():\n",
        "              X_batch = X_batch.cuda()\n",
        "              y_batch = y_batch.cuda()\n",
        "            outputs = model(X_batch)\n",
        "            y_batch = y_batch.unsqueeze(1)\n",
        "            loss = criterion(outputs, y_batch)\n",
        "            total_loss += loss.item() * X_batch.size(0)\n",
        "\n",
        "            # Calculate accuracy\n",
        "            predicted_labels = (outputs >= 0.5).float()\n",
        "            correct_predictions += (predicted_labels == y_batch).sum().item()\n",
        "            total_samples += X_batch.size(0)\n",
        "\n",
        "    avg_loss = total_loss / total_samples\n",
        "    accuracy = correct_predictions / total_samples\n",
        "\n",
        "    return avg_loss, accuracy\n",
        "\n",
        "# Evaluate the model\n",
        "avg_loss, accuracy = evaluate_model(model, test_loader, criterion)\n",
        "print(f\"Loss: {avg_loss}, Accuracy: {accuracy}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2mGcF8iT-ugR",
        "outputId": "fe5a2d09-eb17-4dc7-ed82-4175be00f192"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loss: 0.1234138861141829, Accuracy: 0.9474873393065836\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0yTkLy2Jf4vC"
      },
      "execution_count": 20,
      "outputs": []
    }
  ]
}
